// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: quant.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuantService_Regression_FullMethodName = "/quant_service.QuantService/Regression"
)

// QuantServiceClient is the client API for QuantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuantServiceClient interface {
	Regression(ctx context.Context, in *RegressionRequest, opts ...grpc.CallOption) (*RegressionResult, error)
}

type quantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuantServiceClient(cc grpc.ClientConnInterface) QuantServiceClient {
	return &quantServiceClient{cc}
}

func (c *quantServiceClient) Regression(ctx context.Context, in *RegressionRequest, opts ...grpc.CallOption) (*RegressionResult, error) {
	out := new(RegressionResult)
	err := c.cc.Invoke(ctx, QuantService_Regression_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuantServiceServer is the server API for QuantService service.
// All implementations must embed UnimplementedQuantServiceServer
// for forward compatibility
type QuantServiceServer interface {
	Regression(context.Context, *RegressionRequest) (*RegressionResult, error)
	mustEmbedUnimplementedQuantServiceServer()
}

// UnimplementedQuantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuantServiceServer struct {
}

func (UnimplementedQuantServiceServer) Regression(context.Context, *RegressionRequest) (*RegressionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regression not implemented")
}
func (UnimplementedQuantServiceServer) mustEmbedUnimplementedQuantServiceServer() {}

// UnsafeQuantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuantServiceServer will
// result in compilation errors.
type UnsafeQuantServiceServer interface {
	mustEmbedUnimplementedQuantServiceServer()
}

func RegisterQuantServiceServer(s grpc.ServiceRegistrar, srv QuantServiceServer) {
	s.RegisterService(&QuantService_ServiceDesc, srv)
}

func _QuantService_Regression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantServiceServer).Regression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantService_Regression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantServiceServer).Regression(ctx, req.(*RegressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuantService_ServiceDesc is the grpc.ServiceDesc for QuantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quant_service.QuantService",
	HandlerType: (*QuantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Regression",
			Handler:    _QuantService_Regression_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quant.proto",
}
